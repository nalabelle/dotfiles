#!/usr/bin/env bash

set -euo pipefail

# Template Diff Script
# Clones git template into project and compares with current state
# Usage: template-diff [--clean]

SCRIPT_NAME="$(basename "$0")"
# Use XDG cache directory for template storage
TEMPLATE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/git-template"
DOTFILES_REPO="${TEMPLATE_REPO:-https://github.com/nalabelle/dotfiles.git}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

usage() {
    cat << EOF
Usage: $SCRIPT_NAME [OPTIONS]

Compare current project with git template from dotfiles repository.

OPTIONS:
    --help      Show this help message

DESCRIPTION:
    This script clones the git template into your XDG cache directory
    and uses 'diff -r' to compare the template files with your current project.

    The template is cached in \$XDG_CACHE_HOME/git-template-comparison for
    efficient reuse across multiple comparisons.

EXAMPLES:
    $SCRIPT_NAME              # Compare current project with latest template

EOF
}

log() {
    echo -e "${BLUE}[$SCRIPT_NAME]${NC} $*" >&2
}

warn() {
    echo -e "${YELLOW}[$SCRIPT_NAME WARNING]${NC} $*" >&2
}

error() {
    echo -e "${RED}[$SCRIPT_NAME ERROR]${NC} $*" >&2
    exit 1
}

success() {
    echo -e "${GREEN}[$SCRIPT_NAME]${NC} $*" >&2
}

setup_template_dir() {
    log "Setting up template comparison directory: $TEMPLATE_DIR"

    # Create cache directory if it doesn't exist
    mkdir -p "$(dirname "$TEMPLATE_DIR")"

    # Update existing directory or clone fresh
    if [[ -d "$TEMPLATE_DIR" ]]; then
        log "Updating existing template directory"
        pushd "$TEMPLATE_DIR" >/dev/null
        git fetch origin
        git reset --hard origin/main
        popd >/dev/null
    else
        log "Cloning dotfiles repository (sparse checkout: git/template)"
        git clone \
            --depth 1 \
            --filter=blob:none \
            --sparse \
            "$DOTFILES_REPO" \
            "$TEMPLATE_DIR"

        # Configure sparse checkout
        pushd "$TEMPLATE_DIR" >/dev/null
        git sparse-checkout set git/template
        popd >/dev/null
    fi

    success "Template files available in: $TEMPLATE_DIR/git/template"
}

compare_template() {
    local template_path="$TEMPLATE_DIR/git/template"

    # Check if template directory exists in remote
    if [[ ! -d "$template_path" ]]; then
        error "Template directory not found in remote repository: $template_path."
    fi

    log "Comparing current project with template..."
    echo

    echo -e "${BLUE}Comparing project with template baseline:${NC}"
    echo

    local found_differences=false

    # Only compare files that exist in the template (left join)
    while IFS= read -r -d '' template_file; do
        local relative_path="${template_file#"$template_path"/}"
        local project_file="./$relative_path"

        if [[ -f "$project_file" ]]; then
            # File exists in both - show differences if any
            if ! diff -u "$template_file" "$project_file" >/dev/null 2>&1; then
                echo -e "${YELLOW}$relative_path (project enhancements shown with +):${NC}"
                diff -u "$template_file" "$project_file" || true
                echo
                found_differences=true
            fi
        else
            # File exists in template but not in project - could be added
            echo -e "${GREEN}Missing from project: $relative_path${NC}"
            echo "Template content:"
            cat "$template_file"
            echo
            echo "---"
            echo
            found_differences=true
        fi
    done < <(find "$template_path" -type f -print0)

    if [[ "$found_differences" == "false" ]]; then
        success "Project matches template baseline perfectly!"
    else
        echo
        echo -e "${BLUE}Analysis:${NC}"
        echo "• Lines with + show enhancements your project has added beyond the template"
        echo "• Lines with - show template content not in your project"
        echo "• Missing files or lines should be added if beneficial for your project"
    fi
}

main() {
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        error "Not in a git repository. This script must be run from within a git project."
    fi

    # Parse arguments
    case "${1:-}" in
        --help|-h)
            usage
            exit 0
            ;;
        "")
            # No arguments, proceed with comparison
            ;;
        *)
            error "Unknown option: $1\nUse --help for usage information"
            ;;
    esac

    # Setup template directory
    setup_template_dir

    # Compare template with current project
    compare_template
}

main "$@"
