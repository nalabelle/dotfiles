#!/usr/bin/env bash
set -euo pipefail

# Template Update Wrapper Script
#
# Provides easy commands for pulling template updates from
# https://github.com/nalabelle/git-template.git into this repository
# or for other projects to use the template.

TEMPLATE_REPO="https://github.com/nalabelle/git-template.git"

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }

usage() {
    cat << EOF
Usage: $0 [COMMAND]

Commands:
    pull      Pull template updates into this dotfiles repository (default)
              Uses rebase-friendly approach with squashed commits for linear history
    add       Add template as subtree to external project
    help      Show this help

Template Repository: $TEMPLATE_REPO

Examples:
    # Pull latest template updates into dotfiles repo (creates single commit)
    $0 pull

    # Add template to external project (run from project root)
    $0 add

    # Add template to specific prefix in external project
    $0 add --prefix=standards

Note: Template updates maintain linear history without merge commits.
      .gitattributes merge strategies are respected for project-specific files.
EOF
}

pull_updates() {
    log "Pulling template updates from $TEMPLATE_REPO..."

    if [[ ! -d ".git" ]]; then
        error "Not in a git repository"
        exit 1
    fi

    # Check for clean working tree
    if [[ -n $(git status --porcelain) ]]; then
        error "Working tree has uncommitted changes"
        echo
        log "Please commit or stash your changes before updating template:"
        git status --porcelain | sed 's/^/  /'
        echo
        log "Commands to resolve:"
        log "  git add . && git commit -m 'feat: save work in progress'"
        log "  OR: git stash push -m 'temp stash for template update'"
        exit 1
    fi

    log "Fetching latest template changes..."
    if ! git fetch "$TEMPLATE_REPO" main; then
        error "Failed to fetch template changes"
        exit 1
    fi

    log "Applying template updates using rebase-friendly approach..."
    log "This will create a single commit to maintain linear history"

    # Use merge with --no-commit to stage changes, then create single commit
    if git merge FETCH_HEAD --no-commit --allow-unrelated-histories; then
        log "Template changes staged, creating single commit..."
        git commit -m "feat(template): update template (squashed)"

        success "Template updates applied successfully"
        echo
        log "Template changes have been applied as a single commit"
        log "Linear history has been maintained (no merge commit created)"
    else
        warn "Conflicts detected during template update"
        echo
        log "Resolve conflicts in the following files:"
        git status --porcelain | grep -E "^(UU|AA|DD)" | awk '{print "  - " $2}'
        echo
        log "After resolving conflicts:"
        log "  1. git add <resolved-files>"
        log "  2. git commit -m 'feat(template): update template (squashed)'"
        log ""
        log "Note: .gitattributes merge strategies are respected during merge"
    fi
}

add_template() {
    local prefix="${1:-}"

    if [[ ! -d ".git" ]]; then
        error "Not in a git repository"
        exit 1
    fi

    if [[ -z "$prefix" ]]; then
        log "Adding template to repository root..."
        git subtree add --prefix=. "$TEMPLATE_REPO" main --squash --allow-unrelated-histories
    else
        log "Adding template to prefix: $prefix"
        git subtree add --prefix="$prefix" "$TEMPLATE_REPO" main --squash
    fi

    success "Template added successfully"
    echo
    log "Template files are now available in your project"
    log "To pull future updates, use: git subtree pull --prefix=$prefix $TEMPLATE_REPO main --squash"
}

# Main command handling
case "${1:-pull}" in
    pull)
        pull_updates
        ;;
    add)
        shift
        prefix=""
        while [[ $# -gt 0 ]]; do
            case $1 in
                --prefix=*)
                    prefix="${1#*=}"
                    shift
                    ;;
                *)
                    error "Unknown option: $1"
                    usage
                    exit 1
                    ;;
            esac
        done
        add_template "$prefix"
        ;;
    help)
        usage
        ;;
    *)
        error "Unknown command: $1"
        usage
        exit 1
        ;;
esac
