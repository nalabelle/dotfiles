#!/bin/bash

CONFIG_NAME="$1"

# Verification script to check that home manager properly deployed Kilo Code files

echo "=== Kilo Code Linux Deployment Verification ==="
echo "Config: $CONFIG_NAME"
echo

# Check if Kilo Code rule files are deployed to ~/.kilocode/rules/
echo "1. Checking Kilo Code rule files deployment..."
RULES_DIR="$HOME/.kilocode/rules"

if [ -d "$RULES_DIR" ]; then
    echo "‚úÖ Rules directory exists: $RULES_DIR"

    # Dynamically determine expected rule files from source config
    SRC_RULES_DIR="$(dirname "$0")/../config/kilocode/rules"
    if [ ! -d "$SRC_RULES_DIR" ]; then
        echo "‚ùå Source rules directory missing: $SRC_RULES_DIR"
        exit 1
    fi

    mapfile -t expected_files < <(cd "$SRC_RULES_DIR" && find . -maxdepth 1 -name '*.md' -printf '%f\n' | sort)
    mapfile -t deployed_files < <(cd "$RULES_DIR" && find . -maxdepth 1 -name '*.md' -printf '%f\n' 2>/dev/null | sort)

    echo "Expected rule files: ${expected_files[*]}"
    echo "Deployed rule files: ${deployed_files[*]}"

    missing=0
    for rule_file in "${expected_files[@]}"; do
        if [ -f "$RULES_DIR/$rule_file" ]; then
            echo "‚úÖ Rule file deployed: $rule_file"
            echo "   Content preview:"
            head -3 "$RULES_DIR/$rule_file" | sed 's/^/   /'
        else
            echo "‚ùå Missing rule file: $rule_file"
            missing=1
        fi
    done

    extra=0
    for rule_file in "${deployed_files[@]}"; do
        if [[ ! " ${expected_files[*]} " =~ $rule_file ]]; then
            echo "‚ùå Extra rule file deployed: $rule_file"
            extra=1
        fi
    done

    if [ $missing -ne 0 ] || [ $extra -ne 0 ]; then
        exit 1
    fi
else
    echo "‚ùå Rules directory missing: $RULES_DIR"
    echo "   Home manager did not deploy Kilo Code rule files"
    exit 1
fi

echo

# Check if MCP settings are deployed
# Look for template since cicd likely doesn't have 1pass set up
echo "2. Checking MCP settings deployment..."
if [[ "$OSTYPE" == "darwin"* ]]; then
    MCP_SETTINGS="$HOME/Library/Application Support/Code/User/globalStorage/kilocode.kilo-code/settings/mcp_settings.template.json"
else
    # twain host uses VS Code server path, others use standard XDG path
    if [ "$CONFIG_NAME" = "nalabelle@twain" ]; then
        MCP_SETTINGS="$HOME/.vscode-server/data/User/globalStorage/kilocode.kilo-code/settings/mcp_settings.template.json"
        echo "   Using VS Code server path for twain host"
    else
        MCP_SETTINGS="$HOME/.config/Code/User/globalStorage/kilocode.kilo-code/settings/mcp_settings.template.json"
    fi
fi

if [ -f "$MCP_SETTINGS" ]; then
    echo "‚úÖ MCP settings file deployed: $MCP_SETTINGS"
    echo "   Content preview:"
    if command -v jq >/dev/null 2>&1; then
        jq '.' "$MCP_SETTINGS" | head -10 | sed 's/^/   /'
        echo "   Configured MCP servers:"
        jq -r '.mcpServers | keys[]' "$MCP_SETTINGS" | sed 's/^/   - /'
    else
        head -10 "$MCP_SETTINGS" | sed 's/^/   /'
    fi
else
    echo "‚ùå MCP settings file missing: $MCP_SETTINGS"
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "   Home manager did not deploy MCP settings to macOS Application Support path"
    else
        echo "   Home manager did not deploy MCP settings to Linux XDG path"
    fi
    exit 1
fi

echo

# Verify file permissions
echo "3. Checking file permissions..."
if [ -d "$RULES_DIR" ]; then
    echo "Rule files permissions:"
    find "$RULES_DIR" -maxdepth 1 -type f -exec ls -la {} + | sed 's/^/   /'
fi

if [ -f "$MCP_SETTINGS" ]; then
    echo "MCP settings permissions:"
    find "$(dirname "$MCP_SETTINGS")" -maxdepth 1 -name "$(basename "$MCP_SETTINGS")" -exec ls -la {} + | sed 's/^/   /'
fi

echo

# Validate JSON structure
echo "4. Validating MCP settings JSON..."
if [ -f "$MCP_SETTINGS" ] && command -v jq >/dev/null 2>&1; then
    if jq empty "$MCP_SETTINGS" 2>/dev/null; then
        echo "‚úÖ MCP settings JSON is valid and properly formatted"
    else
        echo "‚ùå MCP settings JSON is invalid"
        exit 1
    fi
fi

echo

# Final summary
echo "=== Deployment Verification Complete ==="
RULES_COUNT=$(find "$RULES_DIR" -name "*.md" 2>/dev/null | wc -l)
EXPECTED_COUNT=$(find "$SRC_RULES_DIR" -maxdepth 1 -name '*.md' 2>/dev/null | wc -l)
MCP_EXISTS=$([ -f "$MCP_SETTINGS" ] && echo "Yes" || echo "No")

echo "Results:"
echo "  - Rule files deployed: $RULES_COUNT/$EXPECTED_COUNT"
echo "  - MCP settings deployed: $MCP_EXISTS"
if [[ "$OSTYPE" == "darwin"* ]]; then
    echo "  - macOS Application Support paths used correctly: ‚úÖ"
else
    echo "  - Linux XDG paths used correctly: ‚úÖ"
fi

if [ "$RULES_COUNT" -eq "$EXPECTED_COUNT" ] && [ -f "$MCP_SETTINGS" ]; then
    echo
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo "üéâ SUCCESS: Home manager correctly deployed all Kilo Code configurations to macOS!"
    else
        echo "üéâ SUCCESS: Home manager correctly deployed all Kilo Code configurations to Linux!"
    fi
    echo "   The flake properly handles cross-platform deployment."
    exit 0
else
    echo
    echo "‚ùå FAILURE: Some Kilo Code configurations were not deployed correctly."
    exit 1
fi
