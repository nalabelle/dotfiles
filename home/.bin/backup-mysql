#!/bin/bash


# Set up default example configuration
CONFIGDIR="$HOME/.config/nalabelle/backups"
CONFIGNAME="default"
CONFIGFILE="$CONFIGNAME.mysql.conf.example"


if [ ! -d $CONFIGDIR ]; then
  mkdir -p $CONFIGDIR
  if [ ! -f $CONFIGDIR/$CONFIGFILE ]; then
    cat > $CONFIGDIR/$CONFIGFILE << EOF
# Example Backup Configuration

## Date Format
DATEFORMAT='+%Y-%m-%d_%H%M%S'

## Delete backups older than X days
DAYSTOKEEP=20

## Source information
USER="user"
HOST="host"
PASS="pass"

## Destination information
DESTINATION="\$HOME/Backup/"

EOF
  fi
fi

# Help
help() {
  cat << EOF
usage: $0 options config

This script handles most of my lightweight backing up needs.

It assumes a bunch of things. You probably shouldn't use it. Go away.

OPTIONS:
-h  Show this message
-v  Output more information for debugging
-d  Do a dry run to see what would be done

Config file should be placed in the config directory. The extension will be automatically appended.

Actions are listed by using ? in place of the action.

EOF
}

# Start functions
buildstring() {
  #BUILDSTRING="mysql"
  BUILDSTRING=""

  if [[ $USER != "" ]]; then
    if $VERBOSE; then
      echo "USER: $USER"
    fi
    BUILDSTRING="$BUILDSTRING -u $USER"
  fi

  if [[ $HOST != "" ]]; then
    if $VERBOSE; then
      echo "HOST: $HOST"
    fi
    BUILDSTRING="$BUILDSTRING -h $HOST"
  fi

  if [[ $PASS != "" ]]; then
    if $VERBOSE; then
      echo "PASS: $PASS"
    fi
    BUILDSTRING="$BUILDSTRING -p$PASS"
  fi
}

dump() {
  buildstring

  if [ ! -d $FOLDER ]; then
    if $DRYRUN; then
      echo "mkdir -p $FOLDER"
    else
      mkdir -p $FOLDER
    fi
  else
    if $VERBOSE; then
      echo "$FOLDER exists"
    fi
  fi

  DBS="$(mysql$BUILDSTRING -Bse 'show databases')"

  for db in $DBS; do
    if [[ "$db" != "information_schema" ]] && [[ "$db" != "performance_schema" ]]; then
      local FILE=$FOLDER/$db.gz
      if [[ "$db" != "mysql" ]]; then
        if $DRYRUN; then
          echo "mysqldump$BUILDSTRING $db | gzip -9 > $FILE"
        else
          mysqldump$BUILDSTRING $db | gzip -9 > $FILE
        fi
      #mysql table needs special handling
      else
        if $DRYRUN; then
          echo "mysqldump$BUILDSTRING --ignore-table=mysql.event $db | gzip -9 > $FILE"
        else
          mysqldump$BUILDSTRING --ignore-table=mysql.event $db | gzip -9 > $FILE
        fi
      fi
    fi
  done
}

delete() {
  if $DRYRUN; then
    echo "find $DESTINATION -maxdepth 1 -mtime +$DAYSTOKEEP -exec rm -r {} \;"
    find $DESTINATION -maxdepth 1 -mtime +$DAYSTOKEEP
  else
    find $DESTINATION -maxdepth 1 -mtime +$DAYSTOKEEP -exec rm -r {} \;
  fi
}

# cli arguments
VERBOSE=false
DRYRUN=false

while getopts "hvd" OPTION; do
  case $OPTION in
    h)
      help
      exit 0
      ;;
    v)
      VERBOSE=true
      ;;
    d)
      DRYRUN=true
      ;;
    ?)
      help
      exit 0
      ;;
  esac
done

shift $((OPTIND-1))

if [ -z $1 ]; then
  echo "Please specify a configuration file"
  help
  exit 0
fi

# Build and load the actual configuration

CONFIGNAME=${1}
CONFIGFILE="$CONFIGNAME.mysql.conf"

#Defaults
DATEFORMAT='+%Y-%m-%d_%H%M%S'
DAYSTOKEEP=20
USER="user"
HOST="host"
PASS="pass"
DESTINATION="$HOME/Backup/"

if [ ! -f $CONFIGDIR/$CONFIGFILE ]; then
  echo "Invalid configuration file"
  help
  exit 0
fi

. $CONFIGDIR/$CONFIGFILE

DESTINATION=${DESTINATION%/}
FOLDER=$DESTINATION/$(date ${DATEFORMAT})


# Execute
dump
delete

exit 0
